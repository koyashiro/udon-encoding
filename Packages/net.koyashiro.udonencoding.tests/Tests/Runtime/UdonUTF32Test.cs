using UdonSharp;
using Koyashiro.UdonTest;

namespace Koyashiro
{
    namespace UdonEncoding.Test
    {
        public class UdonUTF32Test : UdonSharpBehaviour
        {
            public void Start()
            {
                Assert.Equal(new byte[] { 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00 }, UdonUTF32.GetBytes("abc"));
                Assert.Equal(new byte[] { 0x42, 0x30, 0x0, 0x0, 0x44, 0x30, 0x0, 0x0, 0x46, 0x30, 0x0, 0x0 }, UdonUTF32.GetBytes("„ÅÇ„ÅÑ„ÅÜ"));
                Assert.Equal(new byte[] { 0x10, 0xff, 0x0, 0x0, 0x11, 0xff, 0x0, 0x0, 0x12, 0xff, 0x0, 0x0 }, UdonUTF32.GetBytes("ÔºêÔºëÔºí"));
                Assert.Equal(new byte[] { 0x14, 0xf9, 0x01, 0x00, 0x5b, 0xf3, 0x01, 0x00, 0x63, 0xf3, 0x01, 0x00 }, UdonUTF32.GetBytes("ü§îüçõüç£"));

                Assert.Equal("abc", UdonUTF32.GetString(new byte[] { 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00 }));
                Assert.Equal("„ÅÇ„ÅÑ„ÅÜ", UdonUTF32.GetString(new byte[] { 0x42, 0x30, 0x0, 0x0, 0x44, 0x30, 0x0, 0x0, 0x46, 0x30, 0x0, 0x0 }));
                Assert.Equal("ÔºêÔºëÔºí", UdonUTF32.GetString(new byte[] { 0x10, 0xff, 0x0, 0x0, 0x11, 0xff, 0x0, 0x0, 0x12, 0xff, 0x0, 0x0 }));
                Assert.Equal("ü§îüçõüç£", UdonUTF32.GetString(new byte[] { 0x14, 0xf9, 0x01, 0x00, 0x5b, 0xf3, 0x01, 0x00, 0x63, 0xf3, 0x01, 0x00 }));

                string output;
                Assert.True(UdonUTF32.TryGetString(new byte[] { 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00 }, out output));
                Assert.Equal("abc", output);
                Assert.True(UdonUTF32.TryGetString(new byte[] { 0x42, 0x30, 0x0, 0x0, 0x44, 0x30, 0x0, 0x0, 0x46, 0x30, 0x0, 0x0 }, out output));
                Assert.Equal("„ÅÇ„ÅÑ„ÅÜ", output);
                Assert.True(UdonUTF32.TryGetString(new byte[] { 0x10, 0xff, 0x0, 0x0, 0x11, 0xff, 0x0, 0x0, 0x12, 0xff, 0x0, 0x0 }, out output));
                Assert.Equal("ÔºêÔºëÔºí", output);
                Assert.True(UdonUTF32.TryGetString(new byte[] { 0x14, 0xf9, 0x01, 0x00, 0x5b, 0xf3, 0x01, 0x00, 0x63, 0xf3, 0x01, 0x00 }, out output));
                Assert.Equal("ü§îüçõüç£", output);
            }
        }
    }
}
